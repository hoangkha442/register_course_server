generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  attendance_id        Int                   @id @default(autoincrement())
  registration_id      Int?
  date                 DateTime              @db.Date
  status               String                @db.VarChar(255)
  course_registrations course_registrations? @relation(fields: [registration_id], references: [registration_id], onDelete: Cascade, onUpdate: NoAction, map: "attendance_ibfk_1")

  @@index([registration_id], map: "registration_id")
}

model classes {
  class_id             Int                    @id @default(autoincrement())
  class_name           String                 @db.VarChar(255)
  subject_id           Int?
  instructor_id        Int?
  schedule             String                 @db.VarChar(255)
  description          String?                @db.Text
  registered_students  Int                    @default(0)
  price                Decimal                @default(0.00) @db.Decimal(10, 2)
  subjects             subjects?              @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade, onUpdate: NoAction, map: "classes_ibfk_1")
  users                users?                 @relation(fields: [instructor_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "classes_ibfk_2")
  course_registrations course_registrations[]

  @@index([instructor_id], map: "instructor_id")
  @@index([subject_id], map: "subject_id")
}

model course_registrations {
  registration_id   Int          @id @default(autoincrement())
  student_id        Int?
  class_id          Int?
  registration_date DateTime     @db.Date
  study_status      String       @db.VarChar(255)
  attendance        attendance[]
  users             users?       @relation(fields: [student_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "course_registrations_ibfk_1")
  classes           classes?     @relation(fields: [class_id], references: [class_id], onDelete: Cascade, onUpdate: NoAction, map: "course_registrations_ibfk_2")
  payment           payment[]

  @@index([class_id], map: "class_id")
  @@index([student_id], map: "student_id")
}

model parent_student {
  parent_id  Int
  student_id Int
  parents    parents @relation(fields: [parent_id], references: [parent_id], onDelete: Cascade, onUpdate: NoAction, map: "parent_student_ibfk_1")
  users      users   @relation(fields: [student_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "parent_student_ibfk_2")

  @@id([parent_id, student_id])
  @@index([student_id], map: "student_id")
}

model parents {
  parent_id      Int              @id @default(autoincrement())
  user_id        Int?
  email          String           @unique(map: "email") @db.VarChar(255)
  password       String           @db.VarChar(255)
  relationship   String           @db.VarChar(255)
  parent_student parent_student[]
  users          users?           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "parents_ibfk_1")

  @@index([user_id], map: "user_id")
}

model payment {
  payment_id           Int                      @id @default(autoincrement())
  registration_id      Int?
  amount               Decimal                  @db.Decimal(10, 2)
  payment_date         DateTime                 @db.Date
  note                 String?                  @db.Text
  transaction_type     payment_transaction_type @default(debit)
  payment_method       String?                  @db.VarChar(50)
  payment_status       payment_payment_status   @default(pending)
  currency             String?                  @default("VND") @db.VarChar(3)
  payment_processor    String?                  @db.VarChar(50)
  user_id              Int?
  receipt_number       String?                  @db.VarChar(255)
  payer_details        String?                  @db.Text
  users                users?                   @relation(fields: [user_id], references: [user_id], onUpdate: NoAction, map: "fk_payment_user")
  course_registrations course_registrations?    @relation(fields: [registration_id], references: [registration_id], onDelete: Cascade, onUpdate: NoAction, map: "payment_ibfk_1")

  @@index([registration_id], map: "registration_id")
  @@index([user_id], map: "fk_payment_user")
}

model subjects {
  subject_id   Int       @id @default(autoincrement())
  subject_name String    @db.VarChar(255)
  description  String?   @db.Text
  classes      classes[]
}

model users {
  user_id              Int                    @id @default(autoincrement())
  email                String                 @unique(map: "email") @db.VarChar(255)
  password             String                 @db.VarChar(255)
  full_name            String                 @db.VarChar(255)
  role                 users_role
  phone_number         String?                @db.VarChar(15)
  birth_date           DateTime?              @db.Date
  address              String?                @db.Text
  picture              String?                @db.VarChar(255)
  classes              classes[]
  course_registrations course_registrations[]
  parent_student       parent_student[]
  parents              parents[]
  payment              payment[]
}

enum users_role {
  hocVien
  giaoVien
  quanTriVien
}

enum payment_transaction_type {
  debit
  credit
}

enum payment_payment_status {
  pending
  completed
  failed
  refunded
}
